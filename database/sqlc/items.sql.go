// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: items.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (title, description, quantity, price, order_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, description, quantity, price, order_id
`

type CreateItemParams struct {
	Title       string
	Description sql.NullString
	Quantity    int64
	Price       float64
	OrderID     uuid.UUID
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.Title,
		arg.Description,
		arg.Quantity,
		arg.Price,
		arg.OrderID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Quantity,
		&i.Price,
		&i.OrderID,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, title, description, quantity, price, order_id
FROM items
WHERE id = $1
`

func (q *Queries) GetItem(ctx context.Context, id uuid.UUID) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Quantity,
		&i.Price,
		&i.OrderID,
	)
	return i, err
}

const getItemsByOrderID = `-- name: GetItemsByOrderID :many
SELECT id, title, description, quantity, price, order_id
FROM items
WHERE order_id = $1
`

func (q *Queries) GetItemsByOrderID(ctx context.Context, orderID uuid.UUID) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Quantity,
			&i.Price,
			&i.OrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :exec
UPDATE items
SET title = $1, description = $2, quantity = $3, price = $4
WHERE id = $5
`

type UpdateItemParams struct {
	Title       string
	Description sql.NullString
	Quantity    int64
	Price       float64
	ID          uuid.UUID
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.ExecContext(ctx, updateItem,
		arg.Title,
		arg.Description,
		arg.Quantity,
		arg.Price,
		arg.ID,
	)
	return err
}
