// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (account_email, delivery_address, cancel_reason, total_price, paid, submitted, completed, canceled)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, account_email, delivery_address, cancel_reason, total_price, paid, submitted, completed, canceled
`

type CreateOrderParams struct {
	AccountEmail    string
	DeliveryAddress string
	CancelReason    string
	TotalPrice      float64
	Paid            sql.NullBool
	Submitted       sql.NullBool
	Completed       sql.NullBool
	Canceled        sql.NullBool
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.AccountEmail,
		arg.DeliveryAddress,
		arg.CancelReason,
		arg.TotalPrice,
		arg.Paid,
		arg.Submitted,
		arg.Completed,
		arg.Canceled,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.AccountEmail,
		&i.DeliveryAddress,
		&i.CancelReason,
		&i.TotalPrice,
		&i.Paid,
		&i.Submitted,
		&i.Completed,
		&i.Canceled,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, account_email, delivery_address, cancel_reason, total_price, paid, submitted, completed, canceled
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.AccountEmail,
		&i.DeliveryAddress,
		&i.CancelReason,
		&i.TotalPrice,
		&i.Paid,
		&i.Submitted,
		&i.Completed,
		&i.Canceled,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET account_email = $1, delivery_address = $2, cancel_reason = $3, total_price = $4, paid = $5, submitted = $6, completed = $7, canceled = $8
WHERE id = $9
`

type UpdateOrderParams struct {
	AccountEmail    string
	DeliveryAddress string
	CancelReason    string
	TotalPrice      float64
	Paid            sql.NullBool
	Submitted       sql.NullBool
	Completed       sql.NullBool
	Canceled        sql.NullBool
	ID              uuid.UUID
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder,
		arg.AccountEmail,
		arg.DeliveryAddress,
		arg.CancelReason,
		arg.TotalPrice,
		arg.Paid,
		arg.Submitted,
		arg.Completed,
		arg.Canceled,
		arg.ID,
	)
	return err
}
